# -*- coding: utf-8 -*-
"""jeremy_aps360_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MpJWy7SoGA8EfkVjyMEztrnwXvnSh3lM
"""

"""
import kagglehub
import os
import shutil

# Download latest version
path = kagglehub.dataset_download("sriramr/fruits-fresh-and-rotten-for-classification")

# Move dataset to current directory (under 'original-fruits-dataset')
new_download_path = "./original-fruits-dataset"
os.makedirs(new_download_path, exist_ok=True)
shutil.move(path, new_download_path)
#print("Path to dataset files:", path)

import shutil
import os

path1 = os.path.join(new_download_path, '1', 'dataset')

shutil.move(path, path1)

print("Files moved to:", path1)
"""

"""We will first combine the training and testing set
 by fruits (apples, bananas, oranges). For the preprocessing, we will resize all images to a uniform
 dimension of 224x224 pixels to maintain consistency and compatibility with the CNN input require
ments. After that, we will convert the images to RGB colour space if they were not already, ensuring
 uniformity across the dataset. We will also perform manual checks on a random sample of images
 to verify the correctness of labels and correct any misclassifications found. After the preprocessing,
 we will split the dataset into training, validation, and test sets. We will randomly select 70 percent
 of our dataset from each fruit for training, 15 percent for validation, and 15 percent for testing our
 model.

"""

# combine the training and testing set by fruits (apples, bananas, oranges)


import os
import shutil
import random

def combine_datasets(path):
  """Combines training and testing datasets by fruit type.

  Args:
    path: The path to the dataset.
  """
  new_path = "./fruits-dataset"

  fruits = ['freshapples', 'freshbanana', 'freshoranges','rottenapples', 'rottenbanana', 'rottenoranges']
  for fruit in fruits:
    train_dir = os.path.join(path, 'train', fruit)
    test_dir = os.path.join(path, 'test', fruit)
    combined_dir = os.path.join(new_path, fruit)

    if not os.path.exists(combined_dir):
      os.makedirs(combined_dir)

    if os.path.exists(train_dir):
      for filename in os.listdir(train_dir):
        src_path = os.path.join(train_dir, filename)
        dst_path = os.path.join(combined_dir, filename)
        shutil.copy(src_path, dst_path)

    if os.path.exists(test_dir):
      for filename in os.listdir(test_dir):
        src_path = os.path.join(test_dir, filename)
        dst_path = os.path.join(combined_dir, filename)
        shutil.copy(src_path, dst_path)


# Assuming 'path' variable is defined with the dataset path
combine_datasets('./dataset')

# resize all images to a uniform dimension of 224x224 pixels

from PIL import Image
import os

def resize_images(path):
  """Resizes all images in the dataset to 224x224 pixels.

  Args:
    path: The path to the dataset.
  """

  fruits = ['freshapples', 'freshbanana', 'freshoranges','rottenapples', 'rottenbanana', 'rottenoranges']
  for fruit in fruits:
    combined_dir = os.path.join(path, fruit)
    if os.path.exists(combined_dir):
      for filename in os.listdir(combined_dir):
        img_path = os.path.join(combined_dir, filename)
        try:
          img = Image.open(img_path)
          img = img.resize((224, 224))
          img.save(img_path)  # Overwrite the original image with the resized one
        except Exception as e:
          print(f"Error processing image {img_path}: {e}")

#resize_images('./fruits-dataset')

# convert the images to RGB colour space if they were not already

def convert_to_rgb(path):
  """Converts images to RGB color space if they are not already.

  Args:
    path: The path to the dataset.
  """

  fruits = ['freshapples', 'freshbanana', 'freshoranges','rottenapples', 'rottenbanana', 'rottenoranges']
  for fruit in fruits:
    combined_dir = os.path.join(path, fruit)
    if os.path.exists(combined_dir):
      for filename in os.listdir(combined_dir):
        img_path = os.path.join(combined_dir, filename)
        try:
          img = Image.open(img_path)
          if img.mode != 'RGB':
            img = img.convert('RGB')
            img.save(img_path)  # Overwrite the original image with the RGB version
        except Exception as e:
          print(f"Error processing image {img_path}: {e}")


#convert_to_rgb('./fruits-dataset')

# perform manual checks on a random sample of images to verify the correctness of labels
import os
import random
from PIL import Image
import matplotlib.pyplot as plt

def manual_check_labels(path, sample_size=20):
    """Performs manual checks on a random sample of images to verify labels."""
    fruits = ['freshapples', 'freshbanana', 'freshoranges', 'rottenapples', 'rottenbanana', 'rottenoranges']
    for fruit in fruits:
        combined_dir = os.path.join(path, fruit)
        if os.path.exists(combined_dir):
            image_files = os.listdir(combined_dir)
            random_sample = random.sample(image_files, min(sample_size, len(image_files)))

            for filename in random_sample:
                img_path = os.path.join(combined_dir, filename)
                try:
                    img = Image.open(img_path)

                    plt.imshow(img)
                    plt.axis('off')
                    plt.show()

                except Exception as e:
                    print(f"Error processing image {img_path}: {e}")

#manual_check_labels('./fruits-dataset')

# split the dataset into training, validation, and test sets. We will randomly select 70 percent of our dataset from each fruit for training, 15 percent for validation, and 15 percent for testing our model.

import os
import shutil
import random

def split_dataset(path, train_ratio=0.7, val_ratio=0.15, test_ratio=0.15):
  """Splits the dataset into training, validation, and test sets.

  Args:
    path: The path to the dataset.
    train_ratio: The proportion of the dataset to use for training.
    val_ratio: The proportion of the dataset to use for validation.
    test_ratio: The proportion of the dataset to use for testing.
  """

  fruits = ['freshapples', 'freshbanana', 'freshoranges','rottenapples', 'rottenbanana', 'rottenoranges']
  for fruit in fruits:
    combined_dir = os.path.join(path, fruit)
    if os.path.exists(combined_dir):
      image_files = os.listdir(combined_dir)
      random.shuffle(image_files)

      train_split = int(len(image_files) * train_ratio)
      val_split = int(len(image_files) * (train_ratio + val_ratio))

      train_images = image_files[:train_split]
      val_images = image_files[train_split:val_split]
      test_images = image_files[val_split:]

      for split_dir, image_list in zip(['train', 'val', 'test'], [train_images, val_images, test_images]):
        split_fruit_dir = os.path.join('./new-small-dataset', split_dir, fruit)
        if not os.path.exists(split_fruit_dir):
          os.makedirs(split_fruit_dir)

        for filename in image_list:
          src_path = os.path.join(combined_dir, filename)
          dst_path = os.path.join(split_fruit_dir, filename)
          shutil.move(src_path, dst_path)

#split_dataset('./fruits-dataset')

# Create a smaller dataset containing 20% of the original dataset, ensuring it is balanced by each type of fruit.
def create_smaller_dataset(path, output_path, reduction_ratio=0.2):
    """Creates a smaller dataset containing a balanced subset of the original dataset.

    Args:
        path: The path to the original dataset.
        output_path: The path to save the smaller dataset.
        reduction_ratio: The ratio by which to reduce the dataset.
    """
    fruits = ['freshapples', 'freshbanana', 'freshoranges', 'rottenapples', 'rottenbanana', 'rottenoranges']
    for fruit in fruits:
        combined_dir = os.path.join(path, fruit)
        if os.path.exists(combined_dir):
            image_files = os.listdir(combined_dir)
            if len(image_files) == 0:
                print(f"Warning: No images found in {combined_dir}")
                continue
            reduced_count = max(1, int(len(image_files) * reduction_ratio))  # Ensure at least 1 image is copied
            random_sample = random.sample(image_files, reduced_count)

            output_fruit_dir = os.path.join(output_path, fruit)
            if not os.path.exists(output_fruit_dir):
                os.makedirs(output_fruit_dir)

            for filename in random_sample:
                src_path = os.path.join(combined_dir, filename)
                dst_path = os.path.join(output_fruit_dir, filename)
                try:
                    shutil.copy(src_path, dst_path)
                except Exception as e:
                    print(f"Error copying file {src_path} to {dst_path}: {e}")

            print(f"Copied {len(random_sample)} images to {output_fruit_dir}")

create_smaller_dataset('./fruits-dataset', './small-dataset', reduction_ratio=0.2)
resize_images('./small-dataset')
convert_to_rgb('./small-dataset')
split_dataset('./small-dataset')